'use strict';

Object.defineProperty(exports, "__esModule", {
            value: true
});

var _utils = require('../../src/utils/utils.js');

var _utils2 = _interopRequireDefault(_utils);

var _dom = require('../../src/utils/dom.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {

    methods: {
      /*表格单元格 内容编辑*/
        cellEdit: function cellEdit(e, callback, rowIndex, rowData, field) {

        var target = e.target,
          self = this,
          oldVal = void 0,
          editInput = void 0,
          editInputLen = void 0,
          _actionFun = void 0,
          textAlign = void 0,
          childTarget = void 0;

        while (target.className && target.className.indexOf('v-table-body-cell') === -1 || !target.className) {
          target = target.parentNode;
        }

        childTarget = target.children[0];

        childTarget.style.display = 'none';

        if ((0, _dom.hasClass)(target, 'cell-editing')) {
          return false;
        }

        (0, _dom.addClass)(target, 'cell-editing');

        oldVal = childTarget.innerText.trim();

        if (target.style.textAlign) {

          textAlign = target.style.textAlign;
        }

        editInput = document.createElement('input');
        editInput.value = oldVal;
        editInput.className = 'cell-edit-input';
        editInput.style.textAlign = textAlign;
        editInput.style.width = '100%';
        editInput.style.height = '100%';

        target.appendChild(editInput);

        // editInput.focus();

        editInputLen = editInput.value.length;
        if (document.selection) {
          var ctr = editInput.createTextRange();
          ctr.moveStart('character', editInputLen);
          ctr.collapse();
          ctr.select();
        } else if (typeof editInput.selectionStart == 'number' && typeof editInput.selectionEnd == 'number') {
          editInput.selectionStart = editInput.selectionEnd = editInputLen;
        }

        var self_e = e;
        _actionFun = function actionFun(e) {
          if (typeof e.keyCode === 'undefined' || e.keyCode === 0 || e.keyCode == 13) {

            if ((0, _dom.hasClass)(target, 'cell-editing')) {
              (0, _dom.removeClass)(target, 'cell-editing');
            } else {
              return false;
            }

            childTarget.style.display = '';

            callback(editInput.value, oldVal);

            _utils2.default.unbind(editInput, 'blur', _actionFun);
            _utils2.default.unbind(editInput, 'keydown', _actionFun);

            target.removeChild(editInput);
          }

          /*----------------------------------
           *wy 添加 的代码
           * 功能： 点击 tab 键盘的时候 移动到下一个单元格
           * */
          if(e.keyCode == 9){
            /*判断当前td 后面还有 td，否则光标移动到下一行的第一格*/
            // if($(self_e.target).parent().next("td").length != 0){
            //     $(self_e.target).parent().next("td").find('.v-table-body-cell').trigger("click").trigger("focus");
            // }else{
            //   /*判断还有下一行的存在*/
            //   if($(self_e.target).parent().parent().next("tr").length != 0){
            //     $(self_e.target).parent().parent().next("tr").find('td:eq(0) .v-table-body-cell').trigger("click").trigger("focus");
            //   }
            // }
            var tempObj = self.getCellDom($(self_e.target));
            if(!!tempObj){
              console.log(tempObj)
              tempObj.trigger("click").trigger("focus");
            }
          }
          /*------------------------------------*/

        };
        _utils2.default.bind(editInput, 'blur', _actionFun);
        _utils2.default.bind(editInput, 'keydown', _actionFun);
      },
      /*表格单元格 点击事件*/
      cellEditClick: function cellEditClick(e, isEdit, rowData, field, rowIndex,rowDataAll) {
        if (isEdit) {
          var self = this;

          var onCellEditCallBack = function onCellEditCallBack(newValue, oldVal) {

            self.cellEditDone && self.cellEditDone(newValue, oldVal, rowData, field,rowIndex);
          };
          this.cellEdit(e, onCellEditCallBack, rowIndex, rowData, field);
        }
      },
      /*表头 编辑单元格 事件*/
      headCellEdit: function cellEdit(e, callback, rowIndex, rowData, field) {

        var target = e.target,
          self = this,
          oldVal = void 0,
          editInput = void 0,
          editInputLen = void 0,
          _actionFun = void 0,
          textAlign = void 0,
          childTarget = void 0;

        while (target.className && target.className.indexOf('v-table-title-cell') === -1 || !target.className) {
          target = target.parentNode;
        }

        childTarget = target.children[0];

        childTarget.style.display = 'none';

        if ((0, _dom.hasClass)(target, 'cell-editing')) {
          return false;
        }

        (0, _dom.addClass)(target, 'cell-editing');

        oldVal = childTarget.innerText.trim();

        if (target.style.textAlign) {

          textAlign = target.style.textAlign;
        }

        editInput = document.createElement('input');
        editInput.value = oldVal;
        editInput.className = 'cell-edit-input';
        editInput.style.textAlign = textAlign;
        editInput.style.width = '100%';
        editInput.style.height = '100%';

        target.appendChild(editInput);

        // editInput.focus();

        editInputLen = editInput.value.length;
        if (document.selection) {
          var ctr = editInput.createTextRange();
          ctr.moveStart('character', editInputLen);
          ctr.collapse();
          ctr.select();
        } else if (typeof editInput.selectionStart == 'number' && typeof editInput.selectionEnd == 'number') {
          editInput.selectionStart = editInput.selectionEnd = editInputLen;
        }

        var self_e = e;
        _actionFun = function actionFun(e) {
          if (typeof e.keyCode === 'undefined' || e.keyCode === 0 || e.keyCode == 13) {

            if ((0, _dom.hasClass)(target, 'cell-editing')) {
              (0, _dom.removeClass)(target, 'cell-editing');
            } else {
              return false;
            }

            childTarget.style.display = '';

            callback(editInput.value, oldVal);

            _utils2.default.unbind(editInput, 'blur', _actionFun);
            _utils2.default.unbind(editInput, 'keydown', _actionFun);

            target.removeChild(editInput);
          }

          /*----------------------------------
           *wy 添加 的代码
           * 功能： 点击 tab 键盘的时候 移动到下一个单元格
           * */
          if(e.keyCode == 9){
            /*判断当前td 后面还有 td，否则光标移动到下一行的第一格*/
            // console.log($(self_e.target).parent().parent());
            var tempDome = $(self_e.target).parent();
            if(tempDome[0].tagName.toLowerCase() != "td"){
              tempDome = tempDome.parent();
              if(tempDome[0].tagName.toLowerCase() != "td"){
                tempDome = tempDome.parent();
                if(tempDome[0].tagName.toLowerCase() != "td"){
                  tempDome = tempDome.parent();
                }
              }
            }
            if(tempDome.next("td").length != 0){
              tempDome.next("td").find('.v-table-title-cell').trigger("click").trigger("focus");
            }else{
              /*判断还有下一行的存在*/
              if(tempDome.parent().next("tr").length != 0){
                tempDome.parent().next("tr").find('td:eq(0) .v-table-title-cell').trigger("click").trigger("focus");
              }else{
                $('.v-table-btable').find("tr:eq(0)").find("td:eq(0) .v-table-body-cell").trigger("click").trigger("focus");
              }
            }
          }
          /*------------------------------------*/

        };
        _utils2.default.bind(editInput, 'blur', _actionFun);
        _utils2.default.bind(editInput, 'keydown', _actionFun);
      },
      /*wy 添加  实现 表头可以编辑*/
      headCellEditClick:function headCellEditClick(e,headIsEdit,frozenCols,field) {
        if (headIsEdit) {
          var self = this;

          var onCellEditCallBack = function onCellEditCallBack(newValue, oldVal) {
            if(newValue != oldVal){
              self.cellEditDone && self.cellEditDone(newValue, oldVal, frozenCols, field);
            }
          };
          this.headCellEdit(e, onCellEditCallBack, frozenCols, field);
        }
      },
      /*获取下一个 别个 dom 节点*/
      getCellDom:function getCellDom(domObj) {

        function getTd(dom) {
          if(dom[0].tagName.toLowerCase() == "td"){
            return dom;
          }else{
            return getTd(dom.parent());
          }
        }

        var currentTd = getTd(domObj);

        function getNextTd(nextTd) {

          if(nextTd.next('td').length != 0 && nextTd.next('td').find('.text-div').length == 0 ){
            return getNextTd(nextTd.next('td'));

          }else if(nextTd.next('td').length != 0 && nextTd.next('td').find('.text-div').length != 0){

            if(nextTd.next('td').find('.v-table-body-cell').length > 0){
              return nextTd.next('td').find('.v-table-body-cell');

            }else if(nextTd.next('td').find('.v-table-title-cell').length > 0){
              return nextTd.next('td').find('.v-table-title-cell');

            }

          }else if(nextTd.next('td').length == 0){
            console.log(nextTd.parent().next("tr") != 0)
            if(nextTd.parent().next("tr").length != 0){
              var nextTr = nextTd.parent().next("tr");
              if(nextTr.find('td:eq(0)').find('.text-div').length != 0){
                return nextTr.find('td:eq(0)').find('.text-div');
              }else{
                return getNextTd(nextTr.find('td:eq(0)'));
              }

            }else{
              return null;
            }

          }

        }

        var nextTd = getNextTd(currentTd);

        return nextTd;

      },

      contentMenuClick:function contentMenuClick(e,allData,field,title,rowIndex) {

        // console.log(e)
          this.cellPopX = e.x;
          this.cellPopY = e.y-50;

          var tableHeight = this.getTableHeight;

          if(tableHeight - this.cellPopY < 200 ){
            this.cellPopY = tableHeight - 200;
          }

          this.isCellPopShow = false;

          this.cellPopData = {
            allData:allData,
            field:field,
            title:title,
            rowIndex:rowIndex
          }

          var self = this;

          this.menuPopcallBack = function (type,data) {

            /*关闭 menu 弹窗*/
            if(type == "hide"){
              self.isCellPopShow = false;
            }

            //确认样式修改
            if(type == "changeStyle"){

              var tempData = {
                cellStyle:data,
                title:title,
                field:field,
                rowIndex:rowIndex
              }

              self.tableCellStyle && self.tableCellStyle("changeStyle",tempData);

              self.isCellPopShow = false;
            }

            //列移动
            if(type == "moveRow"){
              console.log(data)
              var tempData = {
                direction:data.direction,
                field:field
              }

              self.tableCellStyle && self.tableCellStyle("moveRow",tempData);

              self.isCellPopShow = false;
            }

          }

          setTimeout(function () {
            self.isCellPopShow = true;
          },0)
      }
    }
};
